@256
D=A
@0
M=D
@label_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@LCL
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@ARG
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THIS
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THAT
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(label_0)
// -------- function Main.fibonacci begin 
(Main.fibonacci)
// -------- C_PUSH, argument, 0 begin 
@0
D=A
@ARG
A=M
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// -------- C_PUSH, constant, 2 begin 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// -------- lt begin 
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M-1
A=M
D=M-D
@RESULT_TRUE_0
D;JLT
@RESULT_FALSE_0
0;JMP
(RESULT_TRUE_0)
D=-1
@END_0
0;JMP
(RESULT_FALSE_0)
D=0
@END_0
0;JMP
(END_0)
@SP
A=M
M=D
@SP
M=M+1
// -------- IF_TRUE begin 
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
D=M
@IF_TRUE
D;JNE
@IF_TRUE_END
0;JMP
(IF_TRUE_END)
// -------- IF_FALSE begin 
@IF_FALSE
0;JMP
// -------- IF_TRUE begin 
(IF_TRUE)
// -------- C_PUSH, argument, 0 begin 
@0
D=A
@ARG
A=M
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// -------- return begin 
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
M=M-1
@ARG
AD=M
@R15
M=D
@SP
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// -------- IF_FALSE begin 
(IF_FALSE)
// -------- C_PUSH, argument, 0 begin 
@0
D=A
@ARG
A=M
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// -------- C_PUSH, constant, 2 begin 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// -------- sub begin 
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M-1
@SP
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// -------- begin write_call Main.fibonacci, 1 
@label_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@LCL
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@ARG
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THIS
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THAT
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(label_1)
// -------- C_PUSH, argument, 0 begin 
@0
D=A
@ARG
A=M
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// -------- C_PUSH, constant, 1 begin 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// -------- sub begin 
@SP
M=M-1
@SP
A=M
M=D
@SP
M=M-1
@SP
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// -------- begin write_call Main.fibonacci, 1 
@label_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@LCL
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@ARG
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THIS
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THAT
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(label_2)
// -------- add begin 
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// -------- return begin 
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
M=M-1
@ARG
AD=M
@R15
M=D
@SP
A=M
D=M
@R15
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
D=M
@1
A=D-A
D=M
@THAT
M=D
@R13
D=M
@2
A=D-A
D=M
@THIS
M=D
@R13
D=M
@3
A=D-A
D=M
@ARG
M=D
@R13
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// -------- function Sys.init begin 
(Sys.init)
// -------- C_PUSH, constant, 4 begin 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// -------- begin write_call Main.fibonacci, 1 
@label_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@LCL
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@ARG
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THIS
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@THAT
AD=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(label_3)
// -------- WHILE begin 
(WHILE)
// -------- WHILE begin 
@WHILE
0;JMP
